
    - block:
        - name: Create ASM file devices
          file:
            state: touch
            path: "{{ item[1].path }}"
          become: True
          with_subelements:
            - "{{ asm_disk_groups }}"
            - disks
          when: item[1].type == "file"
          register: asm_disk_files
          tags:
            - create_asm_files
        
        - name: Inflate ASM file devices
          command: "dd if=/dev/zero of={{ item.dest }} bs=1024k count=2000"
          become: True
          with_items:
            - "{{ asm_disk_files.results }}"
          when: ( item.changed == true ) and ( item.state == 'file' ) and ( item.size == 0 )
          tags:
            - inflate_asm_files
      tags:
        - asm_files
        - asm

    - name: Check ASM file devices
      file:
        state: file
        path: "{{ item[1].path }}"
        owner: "{{ operating_system.grid_infrastructure.users | selectattr('title', 'equalto', 'owner') | map(attribute='uid') | first }}"
        group: "{{ operating_system.grid_infrastructure.groups | selectattr('title', 'equalto', 'osasm') | map(attribute='gid') | first }}"
        mode: 0660
      become: True
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item[1].type == "file"
      tags:
        - check_asm_files
        - asm_files
        - asm

    - name: Check ASM block devices
      stat:
        path: "{{ item[1].rawpath }}"
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item[1].type == "block"
      tags:
        - check_asm_blocks
        - asm_blocks
        - asm

    - name: Create Docker networks
      docker_network:
        name: "{{ item.name }}"
        appends: True
        state: present
        ipam_options:
          subnet: "{{ item.subnet }}/{{ item.cidr }}"
      with_items:
        - "{{ docker.networks }}"
      tags:
        - create_docker_networks
        - docker

    - name: Create BIND container
      docker_container:
        name: bind
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        interactive: True
        tty: True
        published_ports:
          "{{ item.ports }}"
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        env:
          "{{ item.env }}"
        command: "{{ item.command }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'bind') | list }}"
      tags:
        - create_bind_container
        - bind
        - docker

    - name: Create DHCPD configuration directory
      file:
        state: directory
        path: "{{ item.config_directory }}"
        mode: 0777
      become: True
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - create_dhcpd_config_dir
        - dhcpd
        - dhcpd_config
        - docker

    - name: Create rac_nodes custom directories
      file:
        state: directory
        path: "{{ operating_system.rac_node_directory }}"
        mode: 0777
      become: True
      tags:
        - create_rac_nodes_custom_dirs
        - rac1
        - docker

    - name: Copy DHCPD configuration file
      copy:
        src: "{{ item.config_file }}" 
        dest: "{{ item.config_directory }}/"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - copy_dhcpd_config_file
        - dhcpd
        - dhcpd_config
        - docker

    - name: Create DHCPD container
      docker_container:
        name: dhcpd
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        interactive: True
        tty: True
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        dns_servers:
          "{{ item.dns }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'dhcpd') | list }}"
      tags:
        - create_dhcpd_container
        - dhcpd
        - docker

    - name: Create NFS configuration directory
      file:
        state: directory
        path: "{{ item.config_directory }}"
        mode: 0777
      become: True
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - create_nfs_config_dir
        - nfs
        - nfs_config
        - docker

    - name: Copy NFS configuration file
      copy:
        src: "{{ item.config_file }}" 
        dest: "{{ item.config_directory }}/"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - copy_nfs_config_file
        - nfs
        - nfs_config
        - docker

    - name: Create NFS container
      docker_container:
        name: nfs
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        interactive: True
        tty: True
        privileged: True
        volumes:
          "{{ item.volumes }}"
        dns_servers:
          "{{ item.dns }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'nfs') | list }}"
      tags:
        - create_nfs_container
        - nfs
        - docker

    - name: Create installation file directories
      file:
        state: directory
        path: "/oracledata/stage/{{ item.version }}"
        mode: 0777
      become: True
      with_items:
        - "{{ installation_files }}"
      tags:
        - create_installation_file_dirs
        - installation_files

    - name: Download installation files
      get_url:
        url: "{{ item.1.name }}"
        dest: "/oracledata/stage/{{ item.1.name | basename }}"
      become: True
      with_subelements:
        - "{{ installation_files }}"
        - files
      tags:
        - download_installation_files
        - installation_files

    - name: Unzip installation files
      unarchive:
        src: "/oracledata/stage/{{ item.1.name | basename }}"
        dest: "/oracledata/stage/{{ item.0.version }}/"
        creates: "/oracledata/stage/{{ item.0.version }}/{{ item.1.creates }}"
        remote_src: True
        owner: "{{ operating_system.grid_infrastructure.users | selectattr('title', 'equalto', 'owner') | map(attribute='uid') | first }}"
        group: "{{ operating_system.grid_infrastructure.groups | selectattr('title', 'equalto', 'inventory') | map(attribute='gid') | first }}"
      become: True
      with_subelements:
        - "{{ installation_files }}"
        - files
      tags:
        - unzip_installation_files
        - installation_files
