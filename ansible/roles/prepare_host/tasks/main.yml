
    - name: Create ASM file devices
      file:
        state: touch
        path: "{{ item[1].path }}"
      become: true
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item[1].type == "file"
      register: asm_disk_files
      tags:
        - create_asm_files
        - asm_files
        - asm
    
    - name: Inflate ASM file devices
      command: "dd if=/dev/zero of={{ item.dest }} bs=1024k count=2000"
      become: true
      with_items:
        - "{{ asm_disk_files.results }}"
      when: ( item.changed == true ) and ( item.state == 'file' ) and ( item.size == 0 )
      tags:
        - inflate_asm_files
        - asm_files
        - asm

    - name: Check ASM file devices
      file:
        state: file
        path: "{{ item[1].path }}"
        owner: "{{ operating_system.grid_infrastructure.users | selectattr('title', 'equalto', 'owner') | map(attribute='uid') | first }}"
        group: "{{ operating_system.grid_infrastructure.groups | selectattr('title', 'equalto', 'osasm') | map(attribute='gid') | first }}"
        mode: 0660
      become: true
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item[1].type == "file"
      tags:
        - check_asm_files
        - asm_files
        - asm

    - name: Check ASM block devices
      stat:
        path: "{{ item[1].rawpath }}"
      with_subelements:
        - "{{ asm_disk_groups }}"
        - disks
      when: item[1].type == "block"
      register: asm_disk_blocks
      tags:
        - check_asm_blocks
        - asm_blocks
        - asm

    - name: Create Docker networks
      docker_network:
        name: "{{ item.name }}"
        appends: True
        state: present
        ipam_options:
          subnet: "{{ item.subnet }}/{{ item.cidr }}"
      with_items:
        - "{{ docker.networks }}"
      tags:
        - create_docker_networks
        - docker

    - name: Create BIND container
      docker_container:
        name: bind
        hostname:  "{{ item.hostname }}"
        image: "{{ item.image }}"
        state: started
        interactive: True
        tty: True
        published_ports:
          "{{ item.ports }}"
        volumes:
          "{{ item.volumes }}"
        networks:
          "{{ item.networks }}"
        env:
          "{{ item.env }}"
        command: "{{ item.command }}"
      with_items:
        - "{{ docker.containers | selectattr('name', 'equalto', 'bind') | list }}"
