
    - name: Create rac1 container
      include: >
        ../../common/tasks/start_rac_node.yml
        this_rac_node="{{ first_rac_node }}"
        this_image="{{
          docker.containers |
          selectattr('name', 'equalto', first_rac_node) |
          map(attribute='image') |
          first }}"
      tags:
        - create_rac1_container

    - block:
        - name: Install grid infrastructure binaries
          command: >
                 /usr/bin/docker exec {{ first_rac_node }} su -
                 {{
                   operating_system.grid_infrastructure.users |
                   selectattr('title', 'equalto', 'owner') |
                   map(attribute='name') |
                   first
                 }} -c "/stage/{{
                   installation_files |
                   selectattr('type', 'equalto', 'grid') |
                   map(attribute='version') |
                   first
                 }}/grid/runInstaller
                 {{
                   installation_files |
                   selectattr('type', 'equalto', 'grid') |
                   map(attribute='installer_parameters') |
                   first | join(' ')
                 }}"
          register: install_grid_binaries_result
          changed_when: (install_grid_binaries_result.rc == 0 ) or (install_grid_binaries_result.rc == 6 )
          failed_when: (install_grid_binaries_result.rc != 0) and (install_grid_binaries_result.rc != 6 )

        - name: Run grid infrastructure root scripts
          command: "/usr/bin/docker exec {{ first_rac_node }} {{ item }}"
          with_items:
            - /u01/app/oraInventory/orainstRoot.sh
            - /u01/app/12.1.0/grid/root.sh

      always:
        - name: Print readable previous command output
          debug:
            var: install_grid_binaries_result.stdout_lines
      tags:
        - install_grid
        - rac1
        - docker

    - block:
        - name: Install database binaries
          command: >
                 /usr/bin/docker exec {{ first_rac_node }} su -
                 {{
                   operating_system.database.users |
                   selectattr('title', 'equalto', 'owner') |
                   map(attribute='name') |
                   first
                 }} -c "/stage/{{
                   installation_files |
                   selectattr('type', 'equalto', 'database') |
                   map(attribute='version') |
                   first
                 }}/database/runInstaller
                 {{
                   installation_files |
                   selectattr('type', 'equalto', 'database') |
                   map(attribute='installer_parameters') |
                   first | join(' ')
                 }}"
          register: install_database_binaries_result
          changed_when: (install_database_binaries_result.rc == 0 ) or (install_database_binaries_result.rc == 6 )
          failed_when: (install_database_binaries_result.rc != 0) and (install_database_binaries_result.rc != 6 )

        - name: Run database installer root scripts
          command: "/usr/bin/docker exec {{ first_rac_node }} {{ item }}"
          with_items:
            - /u01/app/oracle/product/12.1.0/dbhome_1/root.sh

      always:
        - name: Print readable previous command output
          debug:
            var: install_database_binaries_result.stdout_lines
      tags:
        - install_database
        - rac1
        - docker

    - name: Update OPatch for grid infrastructure
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.grid_infrastructure.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "cp -a /stage/{{
               installation_files |
               selectattr('type', 'equalto', 'opatch') |
               map(attribute='version') |
               first
             }}/OPatch/* /u01/app/12.1.0/grid/OPatch/"
      tags:
        - update_opatch_for_grid
        - opatch

    - name: Update OPatch for database
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.database.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "cp -a /stage/{{
               installation_files |
               selectattr('type', 'equalto', 'opatch') |
               map(attribute='version') |
               first
             }}/OPatch/* /u01/app/oracle/product/12.1.0/dbhome_1/OPatch/"
      tags:
        - update_opatch_for_database
        - opatch

    - name: Apply bundle patch to grid infrastructure
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.grid_infrastructure.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "
             /u01/app/12.1.0/grid/OPatch/opatch apply /stage/{{
               installation_files |
               selectattr('type', 'equalto', 'bundle') |
               map(attribute='version') |
               first
             }}/{{ item }} -oh /u01/app/12.1.0/grid -silent"
      with_items:
        - "{{ installation_files | selectattr('type', 'equalto', 'bundle') | map(attribute='patch_numbers') | first }}"
      tags:
        - apply_bundle_patch_to_grid

    - name: Apply bundle patch to database
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.database.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "
             /u01/app/oracle/product/12.1.0/dbhome_1/OPatch/opatch apply /stage/{{
               installation_files |
               selectattr('type', 'equalto', 'bundle') |
               map(attribute='version') |
               first
             }}/{{ item }} -oh /u01/app/oracle/product/12.1.0/dbhome_1 -silent"
      with_items:
        - "{{ installation_files | selectattr('type', 'equalto', 'bundle') | map(attribute='patch_numbers') | first }}"
      tags:
        - apply_bundle_patch_to_database

    - name: Apply one-off patches to database
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.database.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "
             /u01/app/oracle/product/12.1.0/dbhome_1/OPatch/opatch apply /stage/{{
               installation_files |
               selectattr('type', 'equalto', 'oneoff') |
               map(attribute='version') |
               first
             }}/{{ item }} -oh /u01/app/oracle/product/12.1.0/dbhome_1 -silent"
      with_items:
        - "{{ installation_files | selectattr('type', 'equalto', 'oneoff') | map(attribute='patch_numbers') | first }}"
      tags:
        - apply_oneoff_patches_to_database

    - name: Commit rac1 container to an image
      command: "/usr/bin/docker commit {{ first_rac_node }} giinstalled"
      tags:
        - commit_rac1
        - rac1
        - docker

    - name: Create rac1 container post binary install
      include: ../../common/tasks/start_rac_node.yml this_rac_node="{{ first_rac_node }}" this_image=giinstalled
      tags:
        - start_rac1_container_post_install

    - block:
        - name: Configure grid infrastructure binaries
          command: >
                 /usr/bin/docker exec {{ first_rac_node }} su -
                 {{
                   operating_system.grid_infrastructure.users |
                   selectattr('title', 'equalto', 'owner') |
                   map(attribute='name') |
                   first
                 }} -c "/u01/app/12.1.0/grid/crs/config/config.sh
                 {{
                   installation_files |
                   selectattr('type', 'equalto', 'grid') |
                   map(attribute='configuration_parameters') |
                   first | join(' ')
                 }}"
          register: configure_grid_binaries_result
          changed_when: (configure_grid_binaries_result.rc == 0 ) or (configure_grid_binaries_result.rc == 6 )
          failed_when: (configure_grid_binaries_result.rc != 0) and (configure_grid_binaries_result.rc != 6 )
      always:
        - name: Print readable previous command output
          debug:
            var: configure_grid_binaries_result.stdout_lines
      tags:
        - configure_grid
        - docker

    - block:
        - name: Modify the root script to show output
          command: "/usr/bin/docker exec {{ item.name }} sed -i '/rootmacro.sh/s/$/ -stdout/' /u01/app/12.1.0/grid/root.sh"
          with_items:
            - "{{ docker.containers | selectattr('type', 'equalto', 'rac_node') | list }}"
          
        - name: Run grid infrastructure root scripts
          command: "/usr/bin/docker exec {{ item.name }} /u01/app/12.1.0/grid/root.sh"
          register: configure_grid_root_result
          with_items:
            - "{{ docker.containers | selectattr('type', 'equalto', 'rac_node') | list }}"
      tags:
        - configure_grid_root
        - docker

    - block:
        - name: Create grid tools config response file
          lineinfile:
            dest: "{{ operating_system.rac_node_directory }}/tools_config.rsp"
            state: present
            create: yes
            line: "{{ item }}"
            mode: 0644
          become: True
          with_items:
            - "{{ installation_files | selectattr('type', 'equalto', 'grid') | map(attribute='tools_configuration_parameters') | first | list }}"

        - name: Configure grid infrastructure tools
          command: >
                 /usr/bin/docker exec {{ first_rac_node }} su -
                 {{
                   operating_system.grid_infrastructure.users |
                   selectattr('title', 'equalto', 'owner') |
                   map(attribute='name') |
                   first
                 }} -c "/u01/app/12.1.0/grid/cfgtoollogs/configToolAllCommands RESPONSE_FILE=/usr/lib/custom_services/tools_config.rsp"
          register: configure_grid_tools_result
      always:
        - name: Print readable previous command output
          debug:
            var: configure_grid_tools_result.stdout_lines

        - name: Remove grid tools config response file
          file:
            path: "{{ operating_system.rac_node_directory }}/tools_config.rsp"
            state: absent
          become: True
      tags:
        - configure_grid_tools
        - docker

    - name: Relink database binaries for RAC
      command: >
             /usr/bin/docker exec {{ first_rac_node }} su -
             {{
               operating_system.database.users |
               selectattr('title', 'equalto', 'owner') |
               map(attribute='name') |
               first
             }} -c "export ORACLE_HOME=/u01/app/oracle/product/12.1.0/dbhome_1 && make -f $ORACLE_HOME/rdbms/lib/ins_rdbms.mk rac_on && make -f $ORACLE_HOME/rdbms/lib/ins_rdbms.mk ioracle"
      tags:
        - relink_database_binaries_for_rac
        - docker

    - name: Create rac2 container post binary install
      include: ../../common/tasks/start_rac_node.yml this_rac_node=rac2 this_image=giinstalled
      tags:
        - create_rac2_container
